name: "aws-runs-on"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-runs-on"
# Short description of this project
description: |-
  This component is responsible for provisioning an RunsOn (https://runs-on.com/).

  After deploying this component, you will need to install the RunsOn app to GitHub. See the
  [RunsOn documentation](https://runs-on.com/guides/install/#3-github-app-registration) for more information.

  ## Usage

  **Stack Level**: Regional

  The following is an example snippet for how to use this component with embedded networking:

  (`runs-on.yaml`)

  ```yaml
  import:
    - orgs/acme/core/auto/_defaults
    - mixins/region/us-east-1

  components:
    terraform:
      runs-on:
        metadata:
          component: runs-on
        vars:
          name: runs-on
          enabled: true
          capabilities: ["CAPABILITY_IAM"]
          on_failure: "ROLLBACK"
          timeout_in_minutes: 30
          template_url: https://runs-on.s3.eu-west-1.amazonaws.com/cloudformation/template.yaml
          parameters:
            AppCPU: 512
            AppMemory: 1024
            EmailAddress: devops@acme.com
            Environment: core-auto
            GithubOrganization: ACME
            LicenseKey: <LICENSE>
            Private: always # always | true | false - Always will default place in private subnet, true will place in private subnet if tag `private=true` present on workflow, false will place in public subnet
            VpcCidrBlock: 10.100.0.0/16
  ```

  ## Usage with external networking

  ```yaml


  ```

  ## Using embedded networking with refarch components

  ### (DEPRECATED) Setting up with Transit Gateway

  NOTE: you should use 'external' networking if you want to use refarch components. This will greatly simplify your networking setup.

  This assumes you are using the Cloud Posse Components for Transit Gateway
  ([tgw/hub](https://docs.cloudposse.com/components/library/aws/tgw/hub/) &
  [tgw/spoke](https://docs.cloudposse.com/components/library/aws/tgw/spoke/)).

  The outputs of this component contain the same outputs as the `vpc` component. This is because the runs-on
  cloudformation stack creates a VPC and subnets.

  First we need to update the TGW/Hub - this stores information about the VPCs that are allowed to be used by TGW Spokes.

  Assuming your TGW/Hub lives in the `core-network` account and your Runs-On is deployed to `core-auto` (`tgw-hub.yaml`)

  ```yaml
  vars:
    connections:
      - account:
          tenant: core
          stage: auto
        vpc_component_names:
          - vpc
          - runs-on
  ```

  ```yaml
  components:
  terraform:
    tgw/hub/defaults:
      metadata:
        type: abstract
        component: tgw/hub
      vars:
        enabled: true
        name: tgw-hub
        tags:
          Team: sre
          Service: tgw-hub

    tgw/hub:
      metadata:
        inherits:
          - tgw/hub/defaults
        component: tgw/hub
      vars:
        connections:
          - account:
              tenant: core
              stage: network
          - account:
              tenant: core
              stage: auto
            vpc_component_names:
              - vpc
              - runs-on
          - account:
              tenant: plat
              stage: sandbox
          - account:
              tenant: plat
              stage: dev
          - account:
              tenant: plat
              stage: staging
          - account:
              tenant: plat
              stage: prod
  ```

  We then need to create a spoke that refers to the VPC created by Runs-On.

  (`tgw-spoke.yaml`)

  ```yaml
  tgw/spoke/runs-on:
    metadata:
      component: tgw/spoke
      inherits:
        - tgw/spoke-defaults
    vars:
      own_vpc_component_name: runs-on
      attributes:
        - "runs-on"
      connections:
        - account:
            tenant: core
            stage: network
        - account:
            tenant: core
            stage: auto
          vpc_component_names:
            - vpc
            - runs-on
        - account:
            tenant: plat
            stage: sandbox
        - account:
            tenant: plat
            stage: dev
        - account:
            tenant: plat
            stage: staging
        - account:
            tenant: plat
            stage: prod
  ```

  Finally we need to update the spokes of the TGW/Spokes to allow Runs-On traffic to the other accounts.

  Typically this includes `core-auto`, `core-network`, and your platform accounts.

  (`tgw-spoke.yaml`)

  ```yaml
    tgw/spoke:
      metadata:
        inherits:
          - tgw/spoke-defaults
      vars:
        connections:
          ...
              vpc_component_names:
                - vpc
                - runs-on
          ...
  ```

tags:
  - component/runs-on
  - layer/github
  - provider/aws
# Categories of this project
categories:
  - component/runs-on
  - layer/github
  - provider/aws
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-runs-on.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-runs-on/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
